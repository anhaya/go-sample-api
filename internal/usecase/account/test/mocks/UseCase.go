// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/anhaya/go-sample-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: documentNumber, balance
func (_m *UseCase) Create(documentNumber string, balance float64) (string, error) {
	ret := _m.Called(documentNumber, balance)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, float64) string); ok {
		r0 = rf(documentNumber, balance)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, float64) error); ok {
		r1 = rf(documentNumber, balance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: accountId
func (_m *UseCase) Get(accountId string) (entity.Account, error) {
	ret := _m.Called(accountId)

	var r0 entity.Account
	if rf, ok := ret.Get(0).(func(string) entity.Account); ok {
		r0 = rf(accountId)
	} else {
		r0 = ret.Get(0).(entity.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: accountId, balance
func (_m *UseCase) Update(accountId string, balance float64) error {
	ret := _m.Called(accountId, balance)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64) error); ok {
		r0 = rf(accountId, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewUseCaseT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t NewUseCaseT) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
