package cmd

import (
	"log"
	"net/http"
	"strconv"
	"time"

	handler "github.com/anhaya/go-sample-api/internal/app/handler"
	"github.com/anhaya/go-sample-api/internal/app/middleware"
	"github.com/anhaya/go-sample-api/internal/config"
	infraDb "github.com/anhaya/go-sample-api/internal/infrastructure/db"
	accountUseCase "github.com/anhaya/go-sample-api/internal/usecase/account"
	_ "github.com/anhaya/temp/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger"
	"github.com/urfave/negroni"
)

// @title Transaction API
// @version 1.0
// @description This is a sample service for managing transactions
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8081
// @BasePath /
func Execute() {

	//Initiate env vars
	config, err := config.LoadConfig()
	if err != nil {
		log.Panicf("cannot load config: %s", err)
	}

	//Initiate database connection
	db, err := infraDb.Open(
		config.DB.User,
		config.DB.Password,
		config.DB.Host,
		config.DB.Port,
		config.DB.Database)
	if err != nil {
		log.Panicf("error oppening connection %s", err)
	}
	defer db.Close()

	//Initiate dependency injection
	accountRepository := infraDb.NewAccount(db.DB)
	accountUseCase := accountUseCase.NewAccount(accountRepository)
	accountHandler := handler.NewAccount(accountUseCase)

	//Initiate router
	router := mux.NewRouter()

	//Initiate negroni (easier to work with middleware)
	negroni := negroni.New(negroni.HandlerFunc(middleware.Cors))
	negroni.UseHandler(router)

	//Set handler for APIs
	router.HandleFunc("/accounts", accountHandler.Create).Methods("POST")
	router.HandleFunc("/accounts/{accountId}", accountHandler.Get).Methods("GET")
	router.PathPrefix("/swagger/").Handler(httpSwagger.WrapHandler)

	//Iniatiate server API
	http.Handle("/", router)
	srv := &http.Server{
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
		Addr:         ":" + strconv.Itoa(8081),
	}

	log.Printf("server started: %s", strconv.Itoa(8081))
	err = srv.ListenAndServe()
	if err != nil {
		log.Fatal(err.Error())
	}
}
